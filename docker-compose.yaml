# For development purposes only

services:
  database:
    image: postgres:17-alpine
    container_name: weather-db
    restart: always
    environment:
      POSTGRES_DB: weatherdb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: pw
    volumes:
      - data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d weatherdb"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  build-service:
    build:
      context: .
      dockerfile: build_service/Dockerfile
      target: weather-build-service
    container_name: weather-build-service
    image: weather-build-service:${BUILD_SERVICE_VERSION}
    profiles: [build-only]

  bootstrap-service:
    build:
      context: .
      dockerfile: bootstrap_service/Dockerfile
    container_name: weather-bootstrap-service
    image: weather-bootstrap-service:${BOOTSTRAP_SERVICE_VERSION}
    restart: no
    environment:
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_DB: weatherdb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: pw
      CONFIG_FILE: dev_config.json
    depends_on:
      database:
        condition: service_healthy
        restart: true

  forecast-build-service:
    build:
      context: .
      dockerfile: forecast_build_service/Dockerfile
    container_name: forecast-build-service
    image: forecast-build-service:${FORECAST_BUILD_SERVICE_VERSION}
    restart: no
    environment:
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_DB: weatherdb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: pw
      CONFIG_FILE: dev_config.json
    volumes:
      - forecast_models:/app/models
    depends_on:
      database:
        condition: service_healthy
        restart: true

  forecast-service:
    build:
      context: .
      dockerfile: forecast_service/Dockerfile
    container_name: weather-forecast-service
    image: weather-forecast-service:${WEATHER_FORECAST_SERVICE_VERSION}
    restart: no
    environment:
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_DB: weatherdb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: pw
    volumes:
      - forecast_models:/app/models
    depends_on:
      database:
        condition: service_healthy
        restart: true

  daily-maintenance-service:
    build:
      context: .
      dockerfile: daily_maintenance_service/Dockerfile
    container_name: daily-weather-maintenance-service
    image: daily-weather-maintenance-service:${DAILY_MAINTENANCE_SERVICE_VERSION}
    restart: no
    environment:
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_DB: weatherdb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: pw
      CONFIG_FILE: dev_config.json
    depends_on:
      database:
        condition: service_healthy
        restart: true

  weekly-maintenance-service:
    build:
      context: .
      dockerfile: weekly_maintenance_service/Dockerfile
    container_name: weekly-weather-maintenance-service
    image: weekly-weather-maintenance-service:${WEEKLY_MAINTENANCE_SERVICE_VERSION}
    restart: no
    environment:
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_DB: weatherdb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: pw
      CONFIG_FILE: dev_config.json
    depends_on:
      database:
        condition: service_healthy
        restart: true

  api-service:
    build:
      context: .
      dockerfile: api_service/Dockerfile
    container_name: weather-api-service
    image: weather-api-service
    restart: no
    ports:
      - "8000:8000"
    environment:
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_DB: weatherdb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: pw
    depends_on:
      database:
        condition: service_healthy
        restart: true


volumes:
  data:
  forecast_models:
